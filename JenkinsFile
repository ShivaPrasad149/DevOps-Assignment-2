pipeline {
    agent any
    
    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker-hub-cred')
        DOCKER_IMAGE = 'shivaprasad149/devops-assignment-2-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
        KUBECONFIG = credentials('kubeconfig')
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'main',
                    url: 'https://github.com/ShivaPrasad149/DevOps-Assignment-2.git'
                sh 'echo "Code checked out successfully"'
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        
        stage('Test Application') {
            steps {
                script {
                    // Run container for testing
                    sh "docker run -d --name test-app -p 8001:8000 ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    sleep(time: 10, unit: 'SECONDS')
                    
                    // Health check test
                    sh """
                    curl -f http://localhost:8001/health || exit 1
                    curl -f http://localhost:8001/ || exit 1
                    """
                    
                    // Stop test container
                    sh "docker stop test-app && docker rm test-app"
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-cred', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USERNAME')]) {
                        sh """
                        docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
                        docker push ${DOCKER_IMAGE}:${DOCKER_TAG}
                        docker push ${DOCKER_IMAGE}:latest
                        """
                    }
                }
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Update deployment with new image
                    sh """
                    kubectl set image deployment/devops-assignment-2-app \
                    devops-assignment-2-app=${DOCKER_IMAGE}:${DOCKER_TAG} \
                    --record
                    """
                    
                    // Wait for rollout to complete
                    sh "kubectl rollout status deployment/devops-assignment-2-app --timeout=300s"
                    
                    // Verify deployment
                    sh """
                    kubectl get pods -l app=devops-assignment-2-app
                    kubectl get services -l app=devops-assignment-2-app
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup
            sh 'docker system prune -f'
            sh 'echo "Pipeline execution completed"'
        }
        success {
            sh 'echo "Pipeline executed successfully!"'
            emailext (
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "The Jenkins build ${env.BUILD_URL} completed successfully.",
                to: "ShivaPrasad149@example.com"
            )
        }
        failure {
            sh 'echo "Pipeline execution failed!"'
            emailext (
                subject: "FAILED: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "The Jenkins build ${env.BUILD_URL} failed. Please check the console output.",
                to: "ShivaPrasad149@example.com"
            )
        }
    }
}